/* eslint-disable jsx-a11y/anchor-is-valid */
import React, { Fragment, useEffect, useState } from "react"
import Image from "next/image"
import Link from "next/link"
import { Layout } from "components/common"
import { apiLiveScore } from "api"
// import ModalDownloadApp from "components/ModalDownloadApp"
import { Loading } from "components/ui"
import { useRouter } from "next/router"
// import { isTablet, isMobile } from "react-device-detect"
import cn from "classnames"
import { renderStatus } from "lib/func"
import "react-datepicker/dist/react-datepicker.css"
import axios from "axios"

const list = []
for (let i = 0; i < 6; i++) {
  list.push(i)
}

export default function LiveScore({ id }) {
  const [row, setRow] = useState(list)
  const [isInfo, setIsInfo] = useState(true)
  const [info, setInfo] = useState({})
  const [video, setVideo] = useState({})
  const [loading, setLoading] = useState(false)

  function onChangeIsInfo() {
    setIsInfo((c) => !c)
  }

  useEffect(() => {
    async function fetch() {
      try {
        const { data } = await axios.get("/api/livescore-detail", { params: { match_id: id } })
        setRow(data)
      } catch (error) {
        console.log(error)
      }
    }
    async function getVideos() {
      try {
        const { data } = await axios.get("/api/livescore-video", { params: { match_id: id } })
        setVideo(data)
      } catch (error) {
        console.log(error)
      }
    }

    async function getInfo() {
      setLoading(true)
      try {
        const { data } = await axios.get("/api/livescore-info", { params: { match_id: id } })
        if (data) setInfo(data)
      } catch (error) {
        console.log(error)
      } finally {
        setLoading(false)
      }
    }
    fetch()
    getInfo()
    getVideos()
  }, [id])

  return (
    <article className="max-w-screen-md m-auto text-dark-500 p-0 md:p-4 md:mt-6">
      <div className="col-span-3 tb:col-span-2 relative max_content rounded-lg p-4 mx-auto w-full">
        <Loading loading={loading}>
          <ItemInfo dataInfo={info} video={video} />
          <div className="mb-6 text-dark-500 flex border-gray-500 border-b">
            <button
              onClick={onChangeIsInfo}
              className={cn("py-2 mr-4 border-b-4 border-transparent cursor-pointer", {
                "border-blue-500 font-bold text-dark-100": isInfo
              })}
            >
              Thông tin
            </button>
            <button
              onClick={onChangeIsInfo}
              className={cn("py-2 mr-4 border-b-4  border-transparent cursor-pointer", {
                "border-blue-500 font-bold text-dark-100": !isInfo
              })}
            >
              Diễn biến
            </button>
          </div>

          <div>
            {isInfo ? (
              <div className="h-60 text-darker">
                {info?.info?.time ? (
                  <div className="flex space-x-2 items-center mb-4">
                    {calendar} <span>{convertTime(info?.info?.time)}</span>
                  </div>
                ) : (
                  <div className="w-32 rounded h-6 bg-dark-500 mb-4"></div>
                )}
                {info?.info?.location === undefined ? (
                  <div className="w-32 rounded h-6 bg-dark-500"></div>
                ) : (
                  <div className="flex space-x-2 items-center">
                    {stadium} <span>{info?.info?.location}</span>
                  </div>
                )}
              </div>
            ) : (
              <div className="pb-6" style={{ minHeight: 300 }}>
                {row?.length > 0 ? (
                  row?.map((item, k) => {
                    return <Item item={item} key={k} isBorder={k !== row.length - 1} />
                  })
                ) : (
                  <div className="text-dark-500 text-center h-32">
                    Diễn biến chính của trận đấu sẽ được <br /> cập nhật ngay khi có thông tin mới nhất.
                  </div>
                )}
              </div>
            )}
          </div>
        </Loading>
      </div>
    </article>
  )
}
LiveScore.Layout = Layout

const ItemInfo = ({ dataInfo, video }) => {
  const router = useRouter()
  // const [visible, setVisible] = useState(false)

  async function renderLink(video) {
    // if (isMobile || isTablet) {
    const { type, id, videos, status } = video
    try {
      const params = {
        type: status === "live" ? type : videos[0].type,
        id: status === "live" ? id : videos[0].id
      }
      router.push(`/video?id=${params.id}&type=${params.type}`)
      // const { data } = await apiLiveScore.getLink(params)
      // window.open(data)
    } catch (error) {
      console.log(error)
    }
    // } else {
    //   setVisible(true)
    // }
  }
  const { away, home, league, info, season } = dataInfo
  const check = (video?.status === "finish" && video?.videos[0]?.id) || video?.status === "live"

  return (
    <div>
      <button className="mb-2">
        <Link href="/livescore">
          <a className="flex">{back}</a>
        </Link>
      </button>
      <div className="text-center mb-4">
        {season ? (
          <span className="text-sm text-dark-500">
            {league?.league_name} {season}
          </span>
        ) : (
          <div className="w-32 rounded h-6 bg-dark-500 mx-auto"></div>
        )}
      </div>
      <div className="grid grid-cols-3 mb-2">
        <div className="col-span-1 flex justify-center">
          <Fragment>
            {!home?.home_logo || home?.home_logo.includes("zq.win007") ? (
              <div>{iconTeamDf}</div>
            ) : (
              <Image src={home?.home_logo} width={56} height={56} />
            )}
          </Fragment>
        </div>
        <div className="px-4 col-span-1 text-dark-100 flex items-center justify-center text-2xl md:text-4xl font-bold">
          {home?.home_score} - {away?.away_score}
        </div>
        <div className="col-span-1 flex justify-center">
          {!away?.away_logo || away?.away_logo.includes("zq.win007") ? (
            <div>{iconTeamDf}</div>
          ) : (
            <Image src={away?.away_logo} width={56} height={56} />
          )}
        </div>
      </div>
      <div className="grid grid-cols-3 mb-4 text-dark-300">
        <div className="col-span-1 flex justify-center font-bold text-center">
          {home?.home_name ? home?.home_name : <div className="w-32 rounded h-6 bg-dark-500"></div>}
        </div>
        <div className="col-span-1 flex justify-center text-dark-500">
          {info ? <ItemStatus info={info} /> : <div className="w-32 rounded h-6 bg-dark-500"></div>}
        </div>
        <div className="col-span-1 flex justify-center font-bold text-center">
          {away?.away_name ? away?.away_name : <div className="w-32 rounded h-6 bg-dark-500"></div>}
        </div>
      </div>
      {check && (
        <div className="flex justify-center items-center mb-8 space-x-2">
          {iconPlay}
          <button onClick={() => renderLink(video)} className="text-link text-sm font-bold">
            {video?.status === "finish" && video?.videos.length > 0 && "Xem highlight trận đấu"}
            {video?.status === "live" && "Xem trực tiếp"}
          </button>
        </div>
      )}
      {/* <ModalDownloadApp visible={visible} setVisible={setVisible} /> */}
    </div>
  )
}

const Item = ({ item, isBorder }) => {
  const { minute, player_name, event_type, assist_player_name, home_event } = item
  const __class = home_event ? "" : "flex-row-reverse"
  return (
    <div
      className={cn(
        "py-4",
        {
          "border-gray-500 border-b": isBorder
        },
        { "text-right": !home_event }
      )}
    >
      {minute ? (
        <div className={cn("flex text-darker", __class)}>
          <div className="w-12 font-bold">
            {minute}
            {"'"}
          </div>
          {eventTypes.ASSIT === event_type && (
            <Fragment>
              <div className="px-4">{goal}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                {assist_player_name && <div className="text-dark-500 text-sm">Kiến tạo: {assist_player_name}</div>}
              </div>
            </Fragment>
          )}
          {eventTypes.CHANGE === event_type && (
            <Fragment>
              <div className="px-4">{change}</div>
              <div>
                <div className="font-bold">{assist_player_name}</div>
                <div className="text-dark-500 text-sm">thay {player_name}</div>
              </div>
            </Fragment>
          )}
          {eventTypes.RED === event_type && (
            <Fragment>
              <div className="px-4">{red}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">Thẻ đỏ</div>
              </div>
            </Fragment>
          )}
          {eventTypes.YELLOW === event_type && (
            <Fragment>
              <div className="px-4">{yelow}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">Thẻ vàng</div>
              </div>
            </Fragment>
          )}
          {eventTypes.DOUBLE_YELLOW === event_type && (
            <Fragment>
              <div className="px-4">{yelow2}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">2 Thẻ vàng</div>
              </div>
            </Fragment>
          )}
          {eventTypes.MISS_PENT === event_type && (
            <Fragment>
              <div className="px-4">{penaltyFalse}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">Trượt penalty</div>
              </div>
            </Fragment>
          )}
          {eventTypes.PEN === event_type && (
            <Fragment>
              <div className="px-4">{penaltyTrue}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">Penalty</div>
              </div>
            </Fragment>
          )}
          {eventTypes.OG === event_type && (
            <Fragment>
              <div className="px-4">{soccerFalse}</div>
              <div>
                <div className="font-bold">{player_name}</div>
                <div className="text-dark-500 text-sm">Phản lưới</div>
              </div>
            </Fragment>
          )}
        </div>
      ) : (
        <div className="h-16 bg-dark-500 w-full rounded"></div>
      )}
    </div>
  )
}

export async function getServerSideProps({ query }) {
  const { id } = query
  return { props: { id } }
}

const ItemStatus = ({ info }) => {
  info.match_time = info.time
  const obj = renderStatus(info)
  return <div className={`${obj.class}`}>{obj.text}</div>
}

const red = (
  <svg width="16" height="24" viewBox="0 0 16 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="16" height="24" rx="2" fill="#EF4035" />
  </svg>
)

const change = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M4.96552 3.31041H16.1379V1.70903C16.1378 1.39173 16.3191 1.1023 16.6046 0.963941C16.8902 0.82558 17.2297 0.86265 17.4786 1.05937L23.1765 5.5573C23.3763 5.7137 23.493 5.95328 23.493 6.20696C23.493 6.46064 23.3763 6.70022 23.1765 6.85661L17.4786 11.3545C17.2297 11.5513 16.8902 11.5883 16.6046 11.45C16.3191 11.3116 16.1378 11.0222 16.1379 10.7049V9.10351H0.827586C0.371089 9.10215 0.00136337 8.73242 0 8.27592V4.13799C0.00136337 3.68149 0.371089 3.31177 0.827586 3.31041H4.96552Z"
      fill="#36B37E"
    />
    <path
      d="M21.1035 14.8967H23.1724C23.6289 14.8981 23.9986 15.2678 24 15.7243V19.8622C23.9986 20.3187 23.6289 20.6885 23.1724 20.6898H7.86207V22.2912C7.8622 22.6085 7.68091 22.8979 7.39537 23.0363C7.10984 23.1746 6.77033 23.1376 6.52138 22.9408L0.823454 18.4429C0.623714 18.2865 0.507019 18.0469 0.507019 17.7933C0.507019 17.5396 0.623714 17.3 0.823454 17.1436L6.52138 12.6457C6.77033 12.449 7.10984 12.4119 7.39537 12.5502C7.68091 12.6886 7.8622 12.978 7.86207 13.2953V14.8967H21.1035Z"
      fill="#EF4035"
    />
  </svg>
)

const goal = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g>
      <path
        d="M7.48477 0.878142C5.9961 1.4817 4.66032 2.36913 3.51489 3.51423C2.36913 4.65966 1.48269 5.99577 0.878805 7.4841C0.295809 8.92203 0 10.4415 0 12.0002C0 13.5585 0.295809 15.078 0.878805 16.5152C1.48269 18.0039 2.36946 19.34 3.51489 20.4851C4.66032 21.6309 5.99577 22.5176 7.48477 23.1212C8.92269 23.7049 10.4419 23.9997 12.0005 23.9997C13.5591 23.9997 15.078 23.7039 16.5159 23.1212C18.0042 22.5176 19.3407 21.6309 20.4858 20.4851C21.6315 19.34 22.5183 18.0046 23.1219 16.5152C23.7049 15.078 24 13.5585 24 12.0002C24 10.4415 23.7045 8.92203 23.1219 7.4841C22.5183 5.99577 21.6309 4.65933 20.4858 3.51423C19.3407 2.36913 18.0056 1.4817 16.5159 0.878142C15.078 0.295478 13.5591 0 12.0005 0C10.4419 0 8.92269 0.295478 7.48477 0.878142ZM2.99921 17.0518C2.42119 16.689 1.8886 16.2712 1.41703 15.779C0.696743 13.7521 0.574705 11.5578 1.05191 9.47484C1.27642 9.03213 1.53177 8.60698 1.82062 8.19975C1.90983 8.07406 1.9924 7.94307 2.08791 7.82103L4.79595 9.42344C4.79595 9.44467 4.79595 9.46788 4.79595 9.49143C4.78899 10.9479 4.93689 12.3938 5.23138 13.8188C5.23237 13.8254 5.23337 13.8291 5.23469 13.835L3.13452 17.1281C3.08875 17.1049 3.04332 17.0797 2.99921 17.0518ZM11.0511 22.6188C11.5183 22.8572 11.9988 23.0585 12.4926 23.2223C10.3951 23.3135 8.27669 22.8221 6.404 21.7476L10.9436 22.5564C10.9784 22.5787 11.0139 22.5999 11.0511 22.6188ZM11.0345 21.7993L5.67741 20.8446C5.05064 20.0835 4.48688 19.2783 4.00238 18.4178C3.87901 18.1989 3.74139 17.9863 3.63693 17.7578L5.73512 14.4681C5.78154 14.4797 5.83328 14.492 5.89197 14.5076C7.20454 14.8588 8.54033 15.1085 9.8854 15.3041C9.96399 15.3151 10.0297 15.3247 10.0857 15.3307L12.6007 19.6793C12.1643 20.2928 11.7229 20.903 11.2719 21.5065C11.197 21.607 11.1174 21.7035 11.0345 21.7993ZM19.9472 19.9469C19.5207 20.3737 19.0681 20.7584 18.5942 21.1013C18.5156 20.4732 18.38 19.8577 18.1886 19.2564L20.8721 14.2502C21.6113 13.9136 22.3243 13.5319 22.9862 13.0587C23.0728 12.9974 23.1447 12.9287 23.2005 12.8538C23.0061 15.4408 21.9217 17.9727 19.9472 19.9469ZM19.8282 13.4543C19.928 13.6447 20.0265 13.837 20.1253 14.032L17.5333 18.8671C17.5184 18.8704 17.5041 18.8737 17.4892 18.8757C16.0881 19.1374 14.6757 19.2767 13.2514 19.2833L10.6647 14.8107C11.0673 14.0632 11.4663 13.3127 11.8619 12.5619C12.1305 12.0526 12.3945 11.5399 12.6581 11.0275L18.0115 10.4777C18.6671 11.4394 19.2883 12.4217 19.8282 13.4543ZM18.7421 7.71923C18.4881 8.3901 18.2161 9.05401 17.9459 9.71925L12.7307 10.2548C12.6684 10.1726 12.6037 10.0917 12.5357 10.0144C11.9199 9.31699 11.3001 8.6239 10.6813 7.92881C10.6869 7.92185 10.6926 7.91654 10.6982 7.91024C10.4485 7.66086 10.1981 7.41148 9.9484 7.16143L11.4003 2.79029C11.5004 2.76376 11.6012 2.74154 11.703 2.7306C12.4923 2.65034 13.2826 2.55948 14.0738 2.51371C14.5583 2.48652 15.0455 2.47093 15.5383 2.50576L19.1304 6.55456C19.0067 6.94521 18.886 7.33686 18.7421 7.71923ZM19.9472 4.05278C20.9381 5.04434 21.7055 6.17584 22.248 7.38462C21.5768 6.92266 20.8592 6.54262 20.1047 6.23288C19.9873 6.18447 19.867 6.14169 19.7446 6.09957L16.2088 2.11444C16.2334 1.94233 16.2463 1.76988 16.2516 1.59611C17.5967 2.14362 18.8575 2.9634 19.9472 4.05278ZM8.40138 1.38685C8.4153 1.39713 8.42194 1.40576 8.4299 1.40808C9.23806 1.68731 9.97328 2.09852 10.6664 2.58634L9.31003 6.67096C9.30306 6.67295 9.29643 6.67494 9.2898 6.67792C9.01223 6.79267 8.72935 6.89547 8.45609 7.01983C7.33023 7.53153 6.23255 8.09827 5.19855 8.77777L2.522 7.19426C2.52598 7.11069 2.54024 7.0258 2.56876 6.95019C2.7485 6.47132 2.92526 5.9898 3.12855 5.52055C3.28507 5.15908 3.46349 4.80988 3.65815 4.46864C3.78549 4.32803 3.91748 4.18875 4.05345 4.05278C5.32456 2.782 6.82682 1.87965 8.42625 1.34606C8.41796 1.359 8.40934 1.37259 8.40138 1.38685Z"
        fill="#CCCCCC"
      />
    </g>
    <defs>
      <clipPath id="clip0">
        <rect width="24" height="24" fill="white" />
      </clipPath>
    </defs>
  </svg>
)

const penaltyFalse = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0.6 21.2C0.268629 21.2 0 20.9314 0 20.6V3.2V3C0 2.44771 0.447715 2 1 2H1.2H22.8H23C23.5523 2 24 2.44771 24 3V3.2V20.6C24 20.9314 23.7314 21.2 23.4 21.2C23.0686 21.2 22.8 20.9314 22.8 20.6V4.2C22.8 3.64772 22.3523 3.2 21.8 3.2H2.2C1.64772 3.2 1.2 3.64772 1.2 4.2V20.6C1.2 20.9314 0.931371 21.2 0.6 21.2Z"
      fill="#cccccc"
    />
    <path
      d="M9.74238 9.43906C8.99805 9.74084 8.33016 10.1845 7.75744 10.7571C7.18456 11.3298 6.74135 11.9978 6.4394 12.742C6.1479 13.461 6 14.2207 6 15C6 15.7791 6.1479 16.5389 6.4394 17.2575C6.74135 18.0018 7.18473 18.6699 7.75744 19.2424C8.33016 19.8153 8.99789 20.2587 9.74238 20.5604C10.4613 20.8523 11.2209 20.9997 12.0002 20.9997C12.7796 20.9997 13.539 20.8518 14.2579 20.5604C15.0021 20.2587 15.6703 19.8153 16.2429 19.2424C16.8158 18.6699 17.2592 18.0022 17.5609 17.2575C17.8524 16.5389 18 15.7791 18 15C18 14.2207 17.8523 13.461 17.5609 12.742C17.2592 11.9978 16.8154 11.3296 16.2429 10.7571C15.6703 10.1845 15.0028 9.74084 14.2579 9.43906C13.539 9.14774 12.7796 9 12.0002 9C11.2209 9 10.4613 9.14774 9.74238 9.43906ZM7.49961 17.5258C7.2106 17.3444 6.9443 17.1355 6.70852 16.8894C6.34837 15.876 6.28735 14.7788 6.52596 13.7374C6.63821 13.516 6.76589 13.3034 6.91031 13.0998C6.95491 13.037 6.9962 12.9715 7.04395 12.9105L8.39798 13.7117C8.39798 13.7223 8.39798 13.7339 8.39798 13.7456C8.3945 14.4739 8.46845 15.1968 8.61569 15.9093C8.61619 15.9126 8.61668 15.9144 8.61735 15.9174L7.56726 17.5639C7.54438 17.5523 7.52166 17.5397 7.49961 17.5258ZM11.5255 20.3092C11.7592 20.4285 11.9994 20.5291 12.2463 20.611C11.1976 20.6566 10.1383 20.4109 9.202 19.8737L11.4718 20.2781C11.4892 20.2892 11.507 20.2998 11.5255 20.3092ZM11.5172 19.8995L8.83871 19.4222C8.52532 19.0416 8.24344 18.639 8.00119 18.2088C7.93951 18.0993 7.87069 17.993 7.81846 17.8788L8.86756 16.234C8.89077 16.2398 8.91664 16.2459 8.94599 16.2537C9.60227 16.4293 10.2702 16.5541 10.9427 16.652C10.982 16.6574 11.0148 16.6622 11.0428 16.6652L12.3004 18.8395C12.0822 19.1462 11.8615 19.4513 11.636 19.7531C11.5985 19.8033 11.5587 19.8516 11.5172 19.8995ZM15.9736 18.9733C15.7604 19.1867 15.534 19.379 15.2971 19.5505C15.2578 19.2364 15.19 18.9287 15.0943 18.6281L16.4361 16.125C16.8057 15.9567 17.1622 15.7659 17.4931 15.5293C17.5364 15.4986 17.5724 15.4643 17.6002 15.4268C17.5031 16.7203 16.9609 17.9862 15.9736 18.9733ZM15.9141 15.7271C15.964 15.8223 16.0132 15.9184 16.0626 16.0159L14.7667 18.4334C14.7592 18.4351 14.7521 18.4367 14.7446 18.4377C14.0441 18.5686 13.3379 18.6382 12.6257 18.6415L11.3324 16.4052C11.5337 16.0315 11.7331 15.6563 11.9309 15.2809C12.0652 15.0262 12.1972 14.7699 12.3291 14.5137L15.0058 14.2388C15.3336 14.7196 15.6441 15.2107 15.9141 15.7271ZM15.371 12.8596C15.244 13.195 15.1081 13.5269 14.9729 13.8596L12.3654 14.1273C12.3342 14.0862 12.3019 14.0458 12.2679 14.0071C11.96 13.6584 11.6501 13.3119 11.3406 12.9644C11.3435 12.9609 11.3463 12.9582 11.3491 12.9551C11.2242 12.8304 11.0991 12.7057 10.9742 12.5807L11.7001 10.3951C11.7502 10.3819 11.8006 10.3708 11.8515 10.3653C12.2461 10.3252 12.6413 10.2797 13.0369 10.2568C13.2792 10.2432 13.5227 10.2355 13.7691 10.2529L15.5652 12.2772C15.5034 12.4726 15.443 12.6684 15.371 12.8596ZM15.9736 11.0264C16.4691 11.5221 16.8527 12.0879 17.124 12.6923C16.7884 12.4613 16.4296 12.2713 16.0524 12.1164C15.9937 12.0922 15.9335 12.0708 15.8723 12.0497L14.1044 10.0572C14.1167 9.97115 14.1231 9.88493 14.1258 9.79804C14.7983 10.0718 15.4287 10.4817 15.9736 11.0264ZM10.2007 9.69342C10.2077 9.69856 10.211 9.70287 10.2149 9.70403C10.619 9.84364 10.9866 10.0492 11.3332 10.2932L10.655 12.3354C10.6515 12.3364 10.6482 12.3374 10.6449 12.3389C10.5061 12.3963 10.3647 12.4477 10.228 12.5099C9.66511 12.7657 9.11628 13.0491 8.59927 13.3888L7.261 12.5971C7.26299 12.5553 7.27012 12.5129 7.28438 12.475C7.37425 12.2356 7.46263 11.9949 7.56427 11.7602C7.64254 11.5795 7.73174 11.4049 7.82908 11.2343C7.89275 11.164 7.95874 11.0943 8.02672 11.0264C8.66228 10.391 9.41341 9.93981 10.2131 9.67302C10.209 9.67949 10.2047 9.68629 10.2007 9.69342Z"
      fill="#cccccc"
    />
    <circle cx="18" cy="19.1" r="3.6" fill="#EF4035" />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16.639 17.739C16.7395 17.6385 16.9023 17.6385 17.0027 17.739L19.7247 20.461C19.8252 20.5614 19.8252 20.7242 19.7247 20.8247C19.6243 20.9251 19.4615 20.9251 19.3611 20.8247L16.639 18.1026C16.5386 18.0022 16.5386 17.8394 16.639 17.739Z"
      fill="white"
      fillOpacity="0.87"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M19.7247 17.739C19.6243 17.6385 19.4614 17.6385 19.361 17.739L16.639 20.461C16.5385 20.5614 16.5385 20.7242 16.639 20.8247C16.7394 20.9251 16.9022 20.9251 17.0026 20.8247L19.7247 18.1026C19.8251 18.0022 19.8251 17.8394 19.7247 17.739Z"
      fill="white"
      fillOpacity="0.87"
    />
  </svg>
)

const penaltyTrue = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0.6 21.2C0.268629 21.2 0 20.9314 0 20.6V3.2V3C0 2.44771 0.447715 2 1 2H1.2H22.8H23C23.5523 2 24 2.44771 24 3V3.2V20.6C24 20.9314 23.7314 21.2 23.4 21.2C23.0686 21.2 22.8 20.9314 22.8 20.6V4.2C22.8 3.64772 22.3523 3.2 21.8 3.2H2.2C1.64772 3.2 1.2 3.64772 1.2 4.2V20.6C1.2 20.9314 0.931371 21.2 0.6 21.2Z"
      fill="#cccccc"
    />
    <path
      d="M9.74238 9.43906C8.99805 9.74084 8.33016 10.1845 7.75744 10.7571C7.18456 11.3298 6.74135 11.9978 6.4394 12.742C6.1479 13.461 6 14.2207 6 15C6 15.7791 6.1479 16.5389 6.4394 17.2575C6.74135 18.0018 7.18473 18.6699 7.75744 19.2424C8.33016 19.8153 8.99789 20.2587 9.74238 20.5604C10.4613 20.8523 11.2209 20.9997 12.0002 20.9997C12.7796 20.9997 13.539 20.8518 14.2579 20.5604C15.0021 20.2587 15.6703 19.8153 16.2429 19.2424C16.8158 18.6699 17.2592 18.0022 17.5609 17.2575C17.8524 16.5389 18 15.7791 18 15C18 14.2207 17.8523 13.461 17.5609 12.742C17.2592 11.9978 16.8154 11.3296 16.2429 10.7571C15.6703 10.1845 15.0028 9.74084 14.2579 9.43906C13.539 9.14774 12.7796 9 12.0002 9C11.2209 9 10.4613 9.14774 9.74238 9.43906ZM7.49961 17.5258C7.2106 17.3444 6.9443 17.1355 6.70852 16.8894C6.34837 15.876 6.28735 14.7788 6.52596 13.7374C6.63821 13.516 6.76589 13.3034 6.91031 13.0998C6.95491 13.037 6.9962 12.9715 7.04395 12.9105L8.39798 13.7117C8.39798 13.7223 8.39798 13.7339 8.39798 13.7456C8.3945 14.4739 8.46845 15.1968 8.61569 15.9093C8.61619 15.9126 8.61668 15.9144 8.61735 15.9174L7.56726 17.5639C7.54438 17.5523 7.52166 17.5397 7.49961 17.5258ZM11.5255 20.3092C11.7592 20.4285 11.9994 20.5291 12.2463 20.611C11.1976 20.6566 10.1383 20.4109 9.202 19.8737L11.4718 20.2781C11.4892 20.2892 11.507 20.2998 11.5255 20.3092ZM11.5172 19.8995L8.83871 19.4222C8.52532 19.0416 8.24344 18.639 8.00119 18.2088C7.93951 18.0993 7.87069 17.993 7.81846 17.8788L8.86756 16.234C8.89077 16.2398 8.91664 16.2459 8.94599 16.2537C9.60227 16.4293 10.2702 16.5541 10.9427 16.652C10.982 16.6574 11.0148 16.6622 11.0428 16.6652L12.3004 18.8395C12.0822 19.1462 11.8615 19.4513 11.636 19.7531C11.5985 19.8033 11.5587 19.8516 11.5172 19.8995ZM15.9736 18.9733C15.7604 19.1867 15.534 19.379 15.2971 19.5505C15.2578 19.2364 15.19 18.9287 15.0943 18.6281L16.4361 16.125C16.8057 15.9567 17.1622 15.7659 17.4931 15.5293C17.5364 15.4986 17.5724 15.4643 17.6002 15.4268C17.5031 16.7203 16.9609 17.9862 15.9736 18.9733ZM15.9141 15.7271C15.964 15.8223 16.0132 15.9184 16.0626 16.0159L14.7667 18.4334C14.7592 18.4351 14.7521 18.4367 14.7446 18.4377C14.0441 18.5686 13.3379 18.6382 12.6257 18.6415L11.3324 16.4052C11.5337 16.0315 11.7331 15.6563 11.9309 15.2809C12.0652 15.0262 12.1972 14.7699 12.3291 14.5137L15.0058 14.2388C15.3336 14.7196 15.6441 15.2107 15.9141 15.7271ZM15.371 12.8596C15.244 13.195 15.1081 13.5269 14.9729 13.8596L12.3654 14.1273C12.3342 14.0862 12.3019 14.0458 12.2679 14.0071C11.96 13.6584 11.6501 13.3119 11.3406 12.9644C11.3435 12.9609 11.3463 12.9582 11.3491 12.9551C11.2242 12.8304 11.0991 12.7057 10.9742 12.5807L11.7001 10.3951C11.7502 10.3819 11.8006 10.3708 11.8515 10.3653C12.2461 10.3252 12.6413 10.2797 13.0369 10.2568C13.2792 10.2432 13.5227 10.2355 13.7691 10.2529L15.5652 12.2772C15.5034 12.4726 15.443 12.6684 15.371 12.8596ZM15.9736 11.0264C16.4691 11.5221 16.8527 12.0879 17.124 12.6923C16.7884 12.4613 16.4296 12.2713 16.0524 12.1164C15.9937 12.0922 15.9335 12.0708 15.8723 12.0497L14.1044 10.0572C14.1167 9.97115 14.1231 9.88493 14.1258 9.79804C14.7983 10.0718 15.4287 10.4817 15.9736 11.0264ZM10.2007 9.69342C10.2077 9.69856 10.211 9.70287 10.2149 9.70403C10.619 9.84364 10.9866 10.0492 11.3332 10.2932L10.655 12.3354C10.6515 12.3364 10.6482 12.3374 10.6449 12.3389C10.5061 12.3963 10.3647 12.4477 10.228 12.5099C9.66511 12.7657 9.11628 13.0491 8.59927 13.3888L7.261 12.5971C7.26299 12.5553 7.27012 12.5129 7.28438 12.475C7.37425 12.2356 7.46263 11.9949 7.56427 11.7602C7.64254 11.5795 7.73174 11.4049 7.82908 11.2343C7.89275 11.164 7.95874 11.0943 8.02672 11.0264C8.66228 10.391 9.41341 9.93981 10.2131 9.67302C10.209 9.67949 10.2047 9.68629 10.2007 9.69342Z"
      fill="#cccccc"
    />
  </svg>
)

const soccerFalse = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M7.48477 0.878142C5.9961 1.4817 4.66032 2.36913 3.51489 3.51423C2.36913 4.65966 1.48269 5.99577 0.878805 7.4841C0.295809 8.92203 0 10.4415 0 12.0002C0 13.5585 0.295809 15.078 0.878805 16.5152C1.48269 18.0039 2.36946 19.34 3.51489 20.4851C4.66032 21.6309 5.99577 22.5176 7.48477 23.1212C8.92269 23.7049 10.4419 23.9997 12.0005 23.9997C13.5591 23.9997 15.078 23.7039 16.5159 23.1212C18.0042 22.5176 19.3407 21.6309 20.4858 20.4851C21.6315 19.34 22.5183 18.0046 23.1219 16.5152C23.7049 15.078 24 13.5585 24 12.0002C24 10.4415 23.7045 8.92203 23.1219 7.4841C22.5183 5.99577 21.6309 4.65933 20.4858 3.51423C19.3407 2.36913 18.0056 1.4817 16.5159 0.878142C15.078 0.295478 13.5591 0 12.0005 0C10.4419 0 8.92269 0.295478 7.48477 0.878142ZM2.99921 17.0518C2.42119 16.689 1.8886 16.2712 1.41703 15.779C0.696743 13.7521 0.574705 11.5578 1.05191 9.47484C1.27642 9.03213 1.53177 8.60698 1.82062 8.19975C1.90983 8.07406 1.9924 7.94307 2.08791 7.82103L4.79595 9.42344C4.79595 9.44467 4.79595 9.46788 4.79595 9.49143C4.78899 10.9479 4.93689 12.3938 5.23138 13.8188C5.23237 13.8254 5.23337 13.8291 5.23469 13.835L3.13452 17.1281C3.08875 17.1049 3.04332 17.0797 2.99921 17.0518ZM11.0511 22.6188C11.5183 22.8572 11.9988 23.0585 12.4926 23.2223C10.3951 23.3135 8.27669 22.8221 6.404 21.7476L10.9436 22.5564C10.9784 22.5787 11.0139 22.5999 11.0511 22.6188ZM11.0345 21.7993L5.67741 20.8446C5.05064 20.0835 4.48688 19.2783 4.00238 18.4178C3.87901 18.1989 3.74139 17.9863 3.63693 17.7578L5.73512 14.4681C5.78154 14.4797 5.83328 14.492 5.89197 14.5076C7.20454 14.8588 8.54033 15.1085 9.8854 15.3041C9.96399 15.3151 10.0297 15.3247 10.0857 15.3307L12.6007 19.6793C12.1643 20.2928 11.7229 20.903 11.2719 21.5065C11.197 21.607 11.1174 21.7035 11.0345 21.7993ZM19.9472 19.9469C19.5207 20.3737 19.0681 20.7584 18.5942 21.1013C18.5156 20.4732 18.38 19.8577 18.1886 19.2564L20.8721 14.2502C21.6113 13.9136 22.3243 13.5319 22.9862 13.0587C23.0728 12.9974 23.1447 12.9287 23.2005 12.8538C23.0061 15.4408 21.9217 17.9727 19.9472 19.9469ZM19.8282 13.4543C19.928 13.6447 20.0265 13.837 20.1253 14.032L17.5333 18.8671C17.5184 18.8704 17.5041 18.8737 17.4892 18.8757C16.0881 19.1374 14.6757 19.2767 13.2514 19.2833L10.6647 14.8107C11.0673 14.0632 11.4663 13.3127 11.8619 12.5619C12.1305 12.0526 12.3945 11.5399 12.6581 11.0275L18.0115 10.4777C18.6671 11.4394 19.2883 12.4217 19.8282 13.4543ZM18.7421 7.71923C18.4881 8.3901 18.2161 9.05401 17.9459 9.71925L12.7307 10.2548C12.6684 10.1726 12.6037 10.0917 12.5357 10.0144C11.9199 9.31699 11.3001 8.6239 10.6813 7.92881C10.6869 7.92185 10.6926 7.91654 10.6982 7.91024C10.4485 7.66086 10.1981 7.41148 9.9484 7.16143L11.4003 2.79029C11.5004 2.76376 11.6012 2.74154 11.703 2.7306C12.4923 2.65034 13.2826 2.55948 14.0738 2.51371C14.5583 2.48652 15.0455 2.47093 15.5383 2.50576L19.1304 6.55456C19.0067 6.94521 18.886 7.33686 18.7421 7.71923ZM19.9472 4.05278C20.9381 5.04434 21.7055 6.17584 22.248 7.38462C21.5768 6.92266 20.8592 6.54262 20.1047 6.23288C19.9873 6.18447 19.867 6.14169 19.7446 6.09957L16.2088 2.11444C16.2334 1.94233 16.2463 1.76988 16.2516 1.59611C17.5967 2.14362 18.8575 2.9634 19.9472 4.05278ZM8.40138 1.38685C8.4153 1.39713 8.42194 1.40576 8.4299 1.40808C9.23806 1.68731 9.97328 2.09852 10.6664 2.58634L9.31003 6.67096C9.30306 6.67295 9.29643 6.67494 9.2898 6.67792C9.01223 6.79267 8.72935 6.89547 8.45609 7.01983C7.33023 7.53153 6.23255 8.09827 5.19855 8.77777L2.522 7.19426C2.52598 7.11069 2.54024 7.0258 2.56876 6.95019C2.7485 6.47132 2.92526 5.9898 3.12855 5.52055C3.28507 5.15908 3.46349 4.80988 3.65815 4.46864C3.78549 4.32803 3.91748 4.18875 4.05345 4.05278C5.32456 2.782 6.82682 1.87965 8.42625 1.34606C8.41796 1.359 8.40934 1.37259 8.40138 1.38685Z"
      fill="#EF4035"
    />
  </svg>
)

const yelow = (
  <svg width="16" height="24" viewBox="0 0 16 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="16" height="24" rx="2" fill="#FFD901" />
  </svg>
)
const yelow2 = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="9" width="13" height="20" rx="1" fill="#FFD901" />
    <path opacity="0.3" d="M9 3H15C15.5523 3 16 3.44772 16 4V20H10C9.44772 20 9 19.5523 9 19V3Z" fill="#FFAD00" />
    <rect x="2" y="4" width="13" height="20" rx="1" fill="#FFD901" />
  </svg>
)
const iconPlay = (
  <svg width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M17.3 10C17.3 13.7555 14.2555 16.8 10.5 16.8C6.74446 16.8 3.7 13.7555 3.7 10C3.7 6.24446 6.74446 3.2 10.5 3.2C14.2555 3.2 17.3 6.24446 17.3 10Z"
      stroke="#FF5630"
      strokeWidth="1.4"
    />
    <path
      d="M7.93332 6.96673V13.0334C7.93206 13.1836 7.97142 13.3313 8.04722 13.461C8.12302 13.5906 8.23245 13.6974 8.36393 13.7699C8.49542 13.8425 8.64407 13.8782 8.79418 13.8732C8.94428 13.8683 9.09025 13.8228 9.21665 13.7417L13.75 10.8334C13.8634 10.7572 13.9564 10.6542 14.0206 10.5336C14.0849 10.413 14.1185 10.2784 14.1185 10.1417C14.1185 10.0051 14.0849 9.87049 14.0206 9.74987C13.9564 9.62925 13.8634 9.52629 13.75 9.45006L9.24165 6.2834C9.11674 6.19674 8.9705 6.14591 8.81878 6.1364C8.66705 6.12689 8.51561 6.15907 8.38086 6.22945C8.2461 6.29983 8.13317 6.40573 8.05428 6.53569C7.9754 6.66564 7.93357 6.8147 7.93332 6.96673Z"
      fill="#FF5630"
    />
  </svg>
)
const calendar = (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M20.25 3.825V1.5C20.25 1.30109 20.171 1.11032 20.0303 0.96967C19.8897 0.829018 19.6989 0.75 19.5 0.75C19.3011 0.75 19.1103 0.829018 18.9697 0.96967C18.829 1.11032 18.75 1.30109 18.75 1.5V3.75H12.75V1.5C12.75 1.30109 12.671 1.11032 12.5303 0.96967C12.3897 0.829018 12.1989 0.75 12 0.75C11.8011 0.75 11.6103 0.829018 11.4697 0.96967C11.329 1.11032 11.25 1.30109 11.25 1.5V3.75H5.25V1.5C5.25 1.30109 5.17098 1.11032 5.03033 0.96967C4.88968 0.829018 4.69891 0.75 4.5 0.75C4.30109 0.75 4.11032 0.829018 3.96967 0.96967C3.82902 1.11032 3.75 1.30109 3.75 1.5V3.825C2.90298 3.9979 2.1417 4.45814 1.59502 5.12782C1.04834 5.79751 0.749824 6.63551 0.75 7.5V19.5C0.75 20.4946 1.14509 21.4484 1.84835 22.1516C2.19657 22.4999 2.60997 22.7761 3.06494 22.9645C3.51991 23.153 4.00754 23.25 4.5 23.25H19.5C20.4946 23.25 21.4484 22.8549 22.1516 22.1516C22.8549 21.4484 23.25 20.4946 23.25 19.5V7.5C23.2502 6.63551 22.9517 5.79751 22.405 5.12782C21.8583 4.45814 21.097 3.9979 20.25 3.825ZM4.5 5.25H19.5C20.0967 5.25 20.669 5.48705 21.091 5.90901C21.5129 6.33097 21.75 6.90326 21.75 7.5V8.25H2.25V7.5C2.25 6.90326 2.48705 6.33097 2.90901 5.90901C3.33097 5.48705 3.90326 5.25 4.5 5.25ZM19.5 21.75H4.5C3.90326 21.75 3.33097 21.5129 2.90901 21.091C2.48705 20.669 2.25 20.0967 2.25 19.5V9.75H21.75V19.5C21.75 20.0967 21.5129 20.669 21.091 21.091C20.669 21.5129 20.0967 21.75 19.5 21.75Z"
      fill="#CCCCCC"
    />
    <path
      d="M6 12H4.5C4.30109 12 4.11032 12.079 3.96967 12.2197C3.82902 12.3603 3.75 12.5511 3.75 12.75C3.75 12.9489 3.82902 13.1397 3.96967 13.2803C4.11032 13.421 4.30109 13.5 4.5 13.5H6C6.19891 13.5 6.38968 13.421 6.53033 13.2803C6.67098 13.1397 6.75 12.9489 6.75 12.75C6.75 12.5511 6.67098 12.3603 6.53033 12.2197C6.38968 12.079 6.19891 12 6 12Z"
      fill="#CCCCCC"
    />
    <path
      d="M12.75 12H11.25C11.0511 12 10.8603 12.079 10.7197 12.2197C10.579 12.3603 10.5 12.5511 10.5 12.75C10.5 12.9489 10.579 13.1397 10.7197 13.2803C10.8603 13.421 11.0511 13.5 11.25 13.5H12.75C12.9489 13.5 13.1397 13.421 13.2803 13.2803C13.421 13.1397 13.5 12.9489 13.5 12.75C13.5 12.5511 13.421 12.3603 13.2803 12.2197C13.1397 12.079 12.9489 12 12.75 12Z"
      fill="#CCCCCC"
    />
    <path
      d="M19.5 12H18C17.8011 12 17.6103 12.079 17.4697 12.2197C17.329 12.3603 17.25 12.5511 17.25 12.75C17.25 12.9489 17.329 13.1397 17.4697 13.2803C17.6103 13.421 17.8011 13.5 18 13.5H19.5C19.6989 13.5 19.8897 13.421 20.0303 13.2803C20.171 13.1397 20.25 12.9489 20.25 12.75C20.25 12.5511 20.171 12.3603 20.0303 12.2197C19.8897 12.079 19.6989 12 19.5 12Z"
      fill="#CCCCCC"
    />
    <path
      d="M6 15H4.5C4.30109 15 4.11032 15.079 3.96967 15.2197C3.82902 15.3603 3.75 15.5511 3.75 15.75C3.75 15.9489 3.82902 16.1397 3.96967 16.2803C4.11032 16.421 4.30109 16.5 4.5 16.5H6C6.19891 16.5 6.38968 16.421 6.53033 16.2803C6.67098 16.1397 6.75 15.9489 6.75 15.75C6.75 15.5511 6.67098 15.3603 6.53033 15.2197C6.38968 15.079 6.19891 15 6 15Z"
      fill="#CCCCCC"
    />
    <path
      d="M12.75 15H11.25C11.0511 15 10.8603 15.079 10.7197 15.2197C10.579 15.3603 10.5 15.5511 10.5 15.75C10.5 15.9489 10.579 16.1397 10.7197 16.2803C10.8603 16.421 11.0511 16.5 11.25 16.5H12.75C12.9489 16.5 13.1397 16.421 13.2803 16.2803C13.421 16.1397 13.5 15.9489 13.5 15.75C13.5 15.5511 13.421 15.3603 13.2803 15.2197C13.1397 15.079 12.9489 15 12.75 15Z"
      fill="#CCCCCC"
    />
    <path
      d="M19.5 15H18C17.8011 15 17.6103 15.079 17.4697 15.2197C17.329 15.3603 17.25 15.5511 17.25 15.75C17.25 15.9489 17.329 16.1397 17.4697 16.2803C17.6103 16.421 17.8011 16.5 18 16.5H19.5C19.6989 16.5 19.8897 16.421 20.0303 16.2803C20.171 16.1397 20.25 15.9489 20.25 15.75C20.25 15.5511 20.171 15.3603 20.0303 15.2197C19.8897 15.079 19.6989 15 19.5 15Z"
      fill="#CCCCCC"
    />
    <path
      d="M6 18H4.5C4.30109 18 4.11032 18.079 3.96967 18.2197C3.82902 18.3603 3.75 18.5511 3.75 18.75C3.75 18.9489 3.82902 19.1397 3.96967 19.2803C4.11032 19.421 4.30109 19.5 4.5 19.5H6C6.19891 19.5 6.38968 19.421 6.53033 19.2803C6.67098 19.1397 6.75 18.9489 6.75 18.75C6.75 18.5511 6.67098 18.3603 6.53033 18.2197C6.38968 18.079 6.19891 18 6 18Z"
      fill="#CCCCCC"
    />
    <path
      d="M12.75 18H11.25C11.0511 18 10.8603 18.079 10.7197 18.2197C10.579 18.3603 10.5 18.5511 10.5 18.75C10.5 18.9489 10.579 19.1397 10.7197 19.2803C10.8603 19.421 11.0511 19.5 11.25 19.5H12.75C12.9489 19.5 13.1397 19.421 13.2803 19.2803C13.421 19.1397 13.5 18.9489 13.5 18.75C13.5 18.5511 13.421 18.3603 13.2803 18.2197C13.1397 18.079 12.9489 18 12.75 18Z"
      fill="#CCCCCC"
    />
    <path
      d="M19.5 18H18C17.8011 18 17.6103 18.079 17.4697 18.2197C17.329 18.3603 17.25 18.5511 17.25 18.75C17.25 18.9489 17.329 19.1397 17.4697 19.2803C17.6103 19.421 17.8011 19.5 18 19.5H19.5C19.6989 19.5 19.8897 19.421 20.0303 19.2803C20.171 19.1397 20.25 18.9489 20.25 18.75C20.25 18.5511 20.171 18.3603 20.0303 18.2197C19.8897 18.079 19.6989 18 19.5 18Z"
      fill="#CCCCCC"
    />
  </svg>
)
const stadium = (
  <svg width="24" height="18" viewBox="0 0 24 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M21 0.75H3C2.40326 0.75 1.83097 0.987053 1.40901 1.40901C0.987053 1.83097 0.75 2.40326 0.75 3V15C0.75 15.5967 0.987053 16.169 1.40901 16.591C1.83097 17.0129 2.40326 17.25 3 17.25H21C21.5967 17.25 22.169 17.0129 22.591 16.591C23.0129 16.169 23.25 15.5967 23.25 15V3C23.25 2.40326 23.0129 1.83097 22.591 1.40901C22.169 0.987053 21.5967 0.75 21 0.75ZM2.25 6.75H3.75V11.25H2.25V6.75ZM11.25 15.75H3C2.80109 15.75 2.61032 15.671 2.46967 15.5303C2.32902 15.3897 2.25 15.1989 2.25 15V12.75H4.5C4.69891 12.75 4.88968 12.671 5.03033 12.5303C5.17098 12.3897 5.25 12.1989 5.25 12V6C5.25 5.80109 5.17098 5.61032 5.03033 5.46967C4.88968 5.32902 4.69891 5.25 4.5 5.25H2.25V3C2.25 2.80109 2.32902 2.61032 2.46967 2.46967C2.61032 2.32902 2.80109 2.25 3 2.25H11.25V6.105C10.6145 6.27771 10.0534 6.65475 9.65345 7.17795C9.25346 7.70114 9.03675 8.34142 9.03675 9C9.03675 9.65858 9.25346 10.2989 9.65345 10.8221C10.0534 11.3452 10.6145 11.7223 11.25 11.895V15.75ZM10.5 9C10.5 8.70333 10.588 8.41332 10.7528 8.16665C10.9176 7.91997 11.1519 7.72771 11.426 7.61418C11.7001 7.50065 12.0017 7.47094 12.2926 7.52882C12.5836 7.5867 12.8509 7.72956 13.0607 7.93934C13.2704 8.14912 13.4133 8.41639 13.4712 8.70736C13.5291 8.99834 13.4994 9.29994 13.3858 9.57403C13.2723 9.84811 13.08 10.0824 12.8334 10.2472C12.5867 10.412 12.2967 10.5 12 10.5C11.6022 10.5 11.2206 10.342 10.9393 10.0607C10.658 9.77936 10.5 9.39782 10.5 9ZM21.75 11.25H20.25V6.75H21.75V11.25ZM21.75 5.25H19.5C19.3011 5.25 19.1103 5.32902 18.9697 5.46967C18.829 5.61032 18.75 5.80109 18.75 6V12C18.75 12.1989 18.829 12.3897 18.9697 12.5303C19.1103 12.671 19.3011 12.75 19.5 12.75H21.75V15C21.75 15.1989 21.671 15.3897 21.5303 15.5303C21.3897 15.671 21.1989 15.75 21 15.75H12.75V11.895C13.3855 11.7223 13.9466 11.3452 14.3466 10.8221C14.7465 10.2989 14.9633 9.65858 14.9633 9C14.9633 8.34142 14.7465 7.70114 14.3466 7.17795C13.9466 6.65475 13.3855 6.27771 12.75 6.105V2.25H21C21.1989 2.25 21.3897 2.32902 21.5303 2.46967C21.671 2.61032 21.75 2.80109 21.75 3V5.25Z"
      fill="#CCCCCC"
    />
  </svg>
)

const back = (
  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
)

const iconTeamDf = (
  <svg id="Layer_1" className="h-12 w-12" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
    <defs></defs>
    <title>Placeholder_Club</title>
    <path
      fill="#666666"
      d="M186.85,35,153.72,0C118.8,21.67,100,18.33,100,18.33S81.2,21.67,46.28,0L13.15,35s7.32,4.68,12.61,15.42a47.71,47.71,0,0,1,3.29,16.7,102.53,102.53,0,0,1-2.25,17h0C19.32,109.71,12.11,170.78,100,200c87.89-29.22,80.68-90.29,73.2-115.85h0a102.53,102.53,0,0,1-2.25-17,47.71,47.71,0,0,1,3.29-16.7C179.53,39.68,186.85,35,186.85,35Z"
    />
    <path
      className="cls-2"
      d="M100,192.07l-.5-.18C23.41,165.33,25.81,114.31,34,86.26l.13-.5a110,110,0,0,0,2.42-18.27,54.78,54.78,0,0,0-3.86-20l-.2-.44a52.63,52.63,0,0,0-7.66-11.52l-.9-1,23.65-25,1,.58C76.79,26.2,94.51,26.38,99.87,25.91c1,.07,2,.12,3.22.12,7.62,0,24-2.06,48.3-15.9l1-.58,23.65,25-.91,1a53,53,0,0,0-7.65,11.52l-.21.47a55,55,0,0,0-3.86,19.68,109.75,109.75,0,0,0,2.43,18.53l.13.48c8.2,28.06,10.6,79.08-65.5,105.64ZM28,34.63a56.53,56.53,0,0,1,7.2,11.14l.17.34a58.26,58.26,0,0,1,4.19,21.48,112.64,112.64,0,0,1-2.49,18.82l-.17.69c-7.89,27-10.14,76,63.1,101.78,73.24-25.79,71-74.82,63.1-101.78l-.17-.69a112.27,112.27,0,0,1-2.5-19.07,58.18,58.18,0,0,1,4.08-20.93l.29-.64A56.53,56.53,0,0,1,172,34.63l-20.15-21.3c-28.49,16-46.45,16.07-52,15.58a26.89,26.89,0,0,1-3,.13C89.1,29,72.47,27,48.15,13.33Z"
    />
    <path fill="#fff" d="M65.13,98.15v14.64H90.77v10.28H65.13v20.18H52.32V87.87H94.17V98.15Z" />
    <path
      fill="#fff"
      d="M113.51,140.52a27.54,27.54,0,0,1-10.76-10.21,29.8,29.8,0,0,1,0-29.51,27.44,27.44,0,0,1,10.76-10.2,34.33,34.33,0,0,1,28.4-1.15,26,26,0,0,1,9.77,7.28l-8.22,7.59a17.72,17.72,0,0,0-13.93-6.49,18.53,18.53,0,0,0-9.18,2.26,16.05,16.05,0,0,0-6.29,6.29,19.83,19.83,0,0,0,0,18.35,16.05,16.05,0,0,0,6.29,6.29,18.43,18.43,0,0,0,9.18,2.26,17.62,17.62,0,0,0,13.93-6.57l8.22,7.6a25.52,25.52,0,0,1-9.81,7.35,32.49,32.49,0,0,1-13.05,2.53A31.84,31.84,0,0,1,113.51,140.52Z"
    />
    <path
      className="cls-2"
      d="M109.9,47.1A14,14,0,1,0,114,57,13.92,13.92,0,0,0,109.9,47.1Zm-9.08.65,3.31-2.4A12.43,12.43,0,0,1,110.18,50L109,53.68l-4.22,1.37-3.94-2.86Zm-4.95-2.4,3.31,2.4v4.44l-3.94,2.86L91,53.68,89.82,50A12.43,12.43,0,0,1,95.87,45.35ZM90.45,64.84a12.36,12.36,0,0,1-2.81-7.51l2.87-2.09,4.22,1.37,1.51,4.64-2.61,3.59Zm13.67,3.81a12.31,12.31,0,0,1-8.24,0L95,65.8l2.6-3.59h4.88L105,65.8Zm5.43-3.81h-3.18l-2.61-3.59,1.51-4.64,4.22-1.37,2.86,2.09A12.29,12.29,0,0,1,109.55,64.84Z"
    />
  </svg>
)

const eventTypes = {
  ASSIT: 1,
  CHANGE: 11,
  RED: 2,
  YELLOW: 3,
  DOUBLE_YELLOW: 9,
  MISS_PENT: 13,
  PEN: 7,
  OG: 8
}

function addZero(i) {
  return i < 10 ? "0" + i : i
}

function convertTime(date) {
  const _date = new Date(date * 1000)
  let _day = ""
  if (_date.getDay() === 0) {
    _day = "Chủ nhật"
  } else {
    const count = _date.getDay() + 1
    _day = "Thứ " + count
  }
  const month = _date.getMonth() + 1
  return (
    addZero(_date.getHours()) +
    ":" +
    addZero(_date.getMinutes()) +
    " - " +
    _day +
    ", " +
    addZero(_date.getDate()) +
    " tháng " +
    month +
    " năm " +
    _date.getFullYear()
  )
}
